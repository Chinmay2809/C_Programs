// Write a C program to take an integer array nums. Print an array answer such that answer[i] is equal to the product of all the elements of nums except nums[i]. The product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer.

#include <stdio.h>
#include <stdlib.h> 

int* productExceptSelf(int* nums, int numsSize, int* returnSize) {
    
    int* answer = (int*)malloc(numsSize * sizeof(int));
    if (answer == NULL) {
        *returnSize = 0;
        return NULL;
    }

    *returnSize = numsSize; 

    answer[0] = 1;
    for (int i = 1; i < numsSize; i++) {
        answer[i] = answer[i - 1] * nums[i - 1];
    }

    int rightProduct = 1;
    for (int i = numsSize - 1; i >= 0; i--) {
        answer[i] *= rightProduct; 
        rightProduct *= nums[i];   
    }

    return answer;
}

int main() {
    int nums[] = {1, 2, 3, 4};
    int numsSize = sizeof(nums) / sizeof(nums[0]);
    int returnSize;

    int* answer = productExceptSelf(nums, numsSize, &returnSize);

    if (answer != NULL) {
        printf("Input Array: ");
        for (int i = 0; i < numsSize; i++) {
            printf("%d ", nums[i]);
        }
        printf("\n");

        printf("Output Array: ");
        for (int i = 0; i < returnSize; i++) {
            printf("%d ", answer[i]);
        }
        printf("\n");

        free(answer); 
    } else {
        printf("Memory allocation failed.\n");
    }

    int nums2[] = {-1, 1, 0, -3, 3};
    int numsSize2 = sizeof(nums2) / sizeof(nums2[0]);
    int returnSize2;

    int* answer2 = productExceptSelf(nums2, numsSize2, &returnSize2);

    if (answer2 != NULL) {
        printf("Input Array: ");
        for (int i = 0; i < numsSize2; i++) {
            printf("%d ", nums2[i]);
        }
        printf("\n");

        printf("Output Array: ");
        for (int i = 0; i < returnSize2; i++) {
            printf("%d ", answer2[i]);
        }
        printf("\n");

        free(answer2);
    } else {
        printf("Memory allocation failed.\n");
    }

    return 0;
}